import streamlit as st
import pandas as pd
import glob
import os
import re
import base64
import json
import hashlib
from PIL import Image

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(page_title="DENE Store", layout="wide")

# --- –û–±–ª–æ–∂–∫–∞ ---
st.image("data/images/banner.jpg", width="stretch")
st.markdown("<h1 style='text-align:center; white-space: nowrap;'>DENE Store. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h1>", unsafe_allow_html=True)

# --- –ü—É—Ç–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
CATALOG_PATH = "data/catalog.xlsx"
IMAGES_PATH = "data/images"

# --- –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ US ‚Üî EU ---
size_conversion = {
    "6": "39", "6.5": "39.5", "7": "40", "7.5": "40.5",
    "8": "41", "8.5": "42", "9": "42.5", "9.5": "43",
    "10": "44", "10.5": "44.5", "11": "45", "11.5": "46", "12": "46.5"
}
reverse_conversion = {v: k for k, v in size_conversion.items()}

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ ---
if 'cart' not in st.session_state:
    st.session_state.cart = []

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def safe_int_convert(value):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int"""
    try:
        return int(float(value))
    except (ValueError, TypeError):
        return 0

def validate_data(df):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"""
    if df.empty:
        st.error("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
        return False
    
    required_columns = ['brand', 'model']
    missing_columns = [col for col in required_columns if col not in df.columns]
    
    if missing_columns:
        st.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
        return False
    
    return True

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ ---
@st.cache_data(show_spinner=False)
def get_image_paths_cached(image_names, sku):
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º"""
    return get_all_image_paths(image_names, sku)

def get_all_image_paths(image_names, sku):
    """–ò—â–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ image –∏–ª–∏ –ø–æ SKU"""
    image_paths = []
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –∫–æ–ª–æ–Ω–∫–µ image, –∏—â–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if pd.notna(image_names) and image_names != "":
        image_list = str(image_names).split()
        for image_name in image_list:
            patterns = [
                os.path.join(IMAGES_PATH, "**", f"{image_name}.*"),
                os.path.join(IMAGES_PATH, "**", f"{image_name}.jpg"),
                os.path.join(IMAGES_PATH, "**", f"{image_name}.webp"),
                os.path.join(IMAGES_PATH, "**", f"{image_name}.png"),
            ]
            
            for pattern in patterns:
                image_files = glob.glob(pattern, recursive=True)
                if image_files:
                    image_paths.extend(image_files)
                    break
    
    # –ï—Å–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–µ –Ω–∞—à–ª–∏ –∏–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –ø–æ SKU
    if pd.notna(sku) and sku != "":
        patterns = [
            os.path.join(IMAGES_PATH, "**", f"{sku}_*.jpg"),
            os.path.join(IMAGES_PATH, "**", f"{sku}_*.webp"),
            os.path.join(IMAGES_PATH, "**", f"{sku}_*.png"),
        ]
        
        for pattern in patterns:
            image_files = glob.glob(pattern, recursive=True)
            if image_files:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
                for img_path in image_files:
                    if img_path not in image_paths:
                        image_paths.append(img_path)
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    unique_paths = list(dict.fromkeys(image_paths))
    return unique_paths if unique_paths else []

def display_modern_cards(image_paths, key_suffix):
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –º–∏–Ω–∏–∞—Ç—é—Ä–Ω—ã–º–∏ –ø—Ä–µ–≤—å—é-—Ñ–æ—Ç–æ"""
    if not image_paths:
        st.markdown(
            """
            <div style="text-align: center; padding: 40px; background: #f8f9fa; 
                        border-radius: 12px; margin: 10px 0;">
                <div style="font-size: 48px;">üì∑</div>
                <div style="color: #666;">–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</div>
            </div>
            """,
            unsafe_allow_html=True
        )
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –≤ session_state
    if f"selected_{key_suffix}" not in st.session_state:
        st.session_state[f"selected_{key_suffix}"] = 0
    
    selected_index = st.session_state[f"selected_{key_suffix}"]
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏: –æ—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ –∏ –ø—Ä–µ–≤—å—é
    main_col, preview_col = st.columns([3, 1])
    
    with main_col:
        # –û—Å–Ω–æ–≤–Ω–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        try:
            st.image(
                image_paths[selected_index], 
                use_container_width=True,
                caption=f"üì∏ –í–∏–¥ {selected_index + 1} –∏–∑ {len(image_paths)}"
            )
        except:
            st.markdown(
                f"""
                <div style="text-align: center; padding: 60px; background: #fff3cd; 
                            border-radius: 12px; color: #856404; margin: 10px 0;">
                    <div style="font-size: 36px;">‚ùå</div>
                    <div>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ</div>
                </div>
                """,
                unsafe_allow_html=True
            )
    
    with preview_col:
        st.write("")  # –û—Ç—Å—Ç—É–ø
        
        # –ú–∏–Ω–∏–∞—Ç—é—Ä–Ω—ã–µ –ø—Ä–µ–≤—å—é-—Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        for i, img_path in enumerate(image_paths[:4]):
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–π –º–∏–Ω–∏–∞—Ç—é—Ä—ã
            with st.container():
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –º–∏–Ω–∏–∞—Ç—é—Ä—ã
                container_style = """
                    border: 2px solid #FF4B4B; 
                    border-radius: 8px; 
                    padding: 4px;
                    margin-bottom: 8px;
                    background: #fff;
                """ if i == selected_index else """
                    border: 1px solid #e0e0e0; 
                    border-radius: 6px; 
                    padding: 5px;
                    margin-bottom: 8px;
                    background: #fafafa;
                """
                
                st.markdown(f'<div style="{container_style}">', unsafe_allow_html=True)
                
                try:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä–Ω–æ–µ —Ñ–æ—Ç–æ
                    st.image(
                        img_path,
                        width=70,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –º–∏–Ω–∏–∞—Ç—é—Ä
                    )
                    
                    # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ (–Ω–µ–≤–∏–¥–∏–º–∞—è, –Ω–æ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –≤—Å—é –º–∏–Ω–∏–∞—Ç—é—Ä—É)
                    if st.button(
                        "‚†Ä",  # –ù–µ–≤–∏–¥–∏–º—ã–π —Å–∏–º–≤–æ–ª
                        key=f"btn_{key_suffix}_{i}",
                        use_container_width=True,
                        help=f"–ü–æ–∫–∞–∑–∞—Ç—å –≤–∏–¥ {i+1}"
                    ):
                        st.session_state[f"selected_{key_suffix}"] = i
                        st.rerun()
                        
                except:
                    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                    st.markdown(
                        f"""
                        <div style="text-align: center; padding: 15px; background: #f5f5f5; 
                                    border-radius: 4px; color: #999; font-size: 12px;">
                            ‚ùì {i+1}
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                    if st.button(
                        "–í—ã–±—Ä–∞—Ç—å",
                        key=f"btn_err_{key_suffix}_{i}",
                        use_container_width=True
                    ):
                        st.session_state[f"selected_{key_suffix}"] = i
                        st.rerun()
                
                st.markdown('</div>', unsafe_allow_html=True)# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–µ–π ---

def get_unique_models(df):
    """–ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if len(df) == 0:
        return pd.DataFrame()
        
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º –º–æ–¥–µ–ª–∏
    grouped = df.groupby(['brand', 'model_clean', 'gender', 'color']).agg({
        'sku': 'first',  # –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π SKU –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        'image': 'first', # –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        'price': lambda x: list(x.unique()),  # –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
        'size_us': list,  # –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã US
        'size_eu': list   # –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã EU
    }).reset_index()
    
    return grouped

# --- –§—É–Ω–∫—Ü–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã ---
def add_to_cart(item):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    st.session_state.cart.append(item)
    st.success(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {item['brand']} {item['model_clean']} {item['size_us']}US")

def clear_cart():
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
    st.session_state.cart = []
    st.success("üõí –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")

def display_cart():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã"""
    if not st.session_state.cart:
        st.info("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return
    
    st.subheader("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞")
    
    total = 0
    for i, item in enumerate(st.session_state.cart):
        col1, col2, col3, col4, col5 = st.columns([3, 1, 1, 1, 1])
        with col1:
            st.write(f"**{item['brand']} {item['model_clean']}**")
            st.write(f"–†–∞–∑–º–µ—Ä: {item['size_us']}US ({item['size_eu']}EU)")
        with col2:
            st.write(f"{item['price']} ‚Ç∏")
        with col3:
            if st.button("üóëÔ∏è", key=f"remove_{i}", help="–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"):
                st.session_state.cart.pop(i)
                st.rerun()
        
        total += safe_int_convert(item['price'])
    
    st.markdown(f"**–ò—Ç–æ–≥–æ: {total} ‚Ç∏**")
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", type="primary"):
            st.success("üéâ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    with col2:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", type="secondary"):
            clear_cart()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data(show_spinner=False)
def load_data():
    try:
        # –ß–∏—Ç–∞–µ–º –æ–±–∞ –ª–∏—Å—Ç–∞
        df_nike = pd.read_excel(CATALOG_PATH, sheet_name='Nike')
        df_mizuno = pd.read_excel(CATALOG_PATH, sheet_name='Mizuno')
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        df = pd.concat([df_nike, df_mizuno], ignore_index=True)
        df = df.fillna("")

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±—Ä–µ–Ω–¥–µ –∏ –º–æ–¥–µ–ª–∏
        df['brand'] = df['brand'].fillna(method='ffill')
        df['model'] = df['model'].fillna(method='ffill')
        df['gender'] = df['gender'].fillna(method='ffill')
        df['color'] = df['color'].fillna(method='ffill')
        df['image'] = df['image'].fillna(method='ffill')

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–∏
        df["model_clean"] = (
            df["model"]
            .str.replace(r"\d{1,2}(\.\d)?(US|EU)", "", regex=True)
            .str.strip()
        )

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
        df["size_us"] = df["model"].apply(lambda x: re.search(r"(\d{1,2}(\.\d)?)(?=US)", str(x)))
        df["size_us"] = df["size_us"].apply(lambda m: m.group(1) if m else "")
        df["size_eu"] = df["model"].apply(lambda x: re.search(r"(\d{2}(\.\d)?)(?=EU)", str(x)))
        df["size_eu"] = df["size_eu"].apply(lambda m: m.group(1) if m else "")

        # –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤
        df["size_eu"] = df.apply(lambda r: size_conversion.get(r["size_us"], r["size_eu"]), axis=1)
        df["size_us"] = df.apply(lambda r: reverse_conversion.get(r["size_eu"], r["size_us"]), axis=1)

        # –ü–æ–ª –∏ —Ü–≤–µ—Ç
        df["gender"] = df["model"].apply(
            lambda x: "men" if "men" in str(x).lower() else (
                "women" if "women" in str(x).lower() else "unisex"
            )
        )
        df["color"] = df["model"].str.extract(
            r"(white|black|blue|red|green|pink|gray|brown)", flags=re.IGNORECASE, expand=False
        ).fillna("other")

        # –û–ø–∏—Å–∞–Ω–∏–µ
        if "description" not in df.columns:
            df["description"] = "–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–ª–∏—á–∏—é —Ç–æ–≤–∞—Ä–∞ (–∫–æ–ª–æ–Ω–∫–∞ 'yes')
        if 'yes' in df.columns:
            # –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            df = df[df['yes'].astype(str).str.lower().str.strip().isin(['yes', '–¥–∞', '1', 'true', '–µ—Å—Ç—å'])]
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –º–æ–¥–µ–ª–∏ (–Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ —Ü–µ–Ω—ã)
        df = df[df["model_clean"].astype(str).str.strip() != ""]

        return df
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
with st.spinner('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞...'):
    df = load_data()

# –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
if not validate_data(df):
    st.stop()

# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∫–æ—Ä–∑–∏–Ω–æ–π –∏ –ø–æ–∏—Å–∫–æ–º ---
with st.sidebar:
    st.header("üõí –ö–æ—Ä–∑–∏–Ω–∞")
    display_cart()
    
    st.divider()
    
    st.header("üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫")
    search_query = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", "")
    
    st.divider()
    
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    items_per_page = st.slider("–¢–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ", 8, 32, 16)
    sort_option = st.selectbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", [
        "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", 
        "–¶–µ–Ω–∞ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)", 
        "–¶–µ–Ω–∞ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)",
        "–ù–∞–∑–≤–∞–Ω–∏–µ (–ê-–Ø)",
        "–ù–∞–∑–≤–∞–Ω–∏–µ (–Ø-–ê)"
    ])

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã ---
st.divider()
st.markdown("### üîé –§–∏–ª—å—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞")

col1, col2, col3, col4, col5, col6 = st.columns(6)

# –ë—Ä–µ–Ω–¥
available_brands = ["–í—Å–µ"] + sorted(df["brand"].unique().tolist()) if len(df) > 0 else ["–í—Å–µ"]
brand_filter = col1.selectbox("–ë—Ä–µ–Ω–¥", available_brands)

# –ú–æ–¥–µ–ª—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞
if len(df) > 0:
    if brand_filter != "–í—Å–µ":
        brand_models = sorted(df[df["brand"] == brand_filter]["model_clean"].unique().tolist())
    else:
        brand_models = sorted(df["model_clean"].unique().tolist())
else:
    brand_models = ["–í—Å–µ"]
model_filter = col2.selectbox("–ú–æ–¥–µ–ª—å", ["–í—Å–µ"] + brand_models)

# –†–∞–∑–º–µ—Ä—ã
available_sizes_us = ["–í—Å–µ"] + sorted(df["size_us"].dropna().unique().tolist()) if len(df) > 0 else ["–í—Å–µ"]
available_sizes_eu = ["–í—Å–µ"] + sorted(df["size_eu"].dropna().unique().tolist()) if len(df) > 0 else ["–í—Å–µ"]
size_us_filter = col3.selectbox("–†–∞–∑–º–µ—Ä (US)", available_sizes_us)
size_eu_filter = col4.selectbox("–†–∞–∑–º–µ—Ä (EU)", available_sizes_eu)

# –ü–æ–ª –∏ —Ü–≤–µ—Ç
gender_filter = col5.selectbox("–ü–æ–ª", ["–í—Å–µ", "men", "women", "unisex"])
color_filter = col6.selectbox("–¶–≤–µ—Ç", ["–í—Å–µ"] + sorted(df["color"].dropna().unique().tolist()) if len(df) > 0 else ["–í—Å–µ"])

# --- –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã ---
filtered_df = df.copy()
if len(df) > 0:
    if brand_filter != "–í—Å–µ":
        filtered_df = filtered_df[filtered_df["brand"] == brand_filter]
    if model_filter != "–í—Å–µ":
        filtered_df = filtered_df[filtered_df["model_clean"] == model_filter]
    if size_us_filter != "–í—Å–µ":
        eu_equiv = size_conversion.get(size_us_filter, "")
        filtered_df = filtered_df[
            (filtered_df["size_us"] == size_us_filter) | (filtered_df["size_eu"] == eu_equiv)
        ]
    if size_eu_filter != "–í—Å–µ":
        us_equiv = reverse_conversion.get(size_eu_filter, "")
        filtered_df = filtered_df[
            (filtered_df["size_eu"] == size_eu_filter) | (filtered_df["size_us"] == us_equiv)
        ]
    if gender_filter != "–í—Å–µ":
        filtered_df = filtered_df[filtered_df["gender"] == gender_filter]
    if color_filter != "–í—Å–µ":
        filtered_df = filtered_df[filtered_df["color"] == color_filter]
    
    # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    if search_query:
        filtered_df = filtered_df[
            filtered_df["model_clean"].str.contains(search_query, case=False, na=False) |
            filtered_df["brand"].str.contains(search_query, case=False, na=False)
        ]

st.divider()

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
col_info1, col_info2, col_info3, col_info4 = st.columns(4)
with col_info1:
    st.metric("üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤", len(filtered_df))
with col_info2:
    st.metric("üè∑Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π", filtered_df["model_clean"].nunique() if len(filtered_df) > 0 else 0)
with col_info3:
    if len(filtered_df) > 0 and 'price' in filtered_df.columns:
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–æ–π
        prices_with_values = filtered_df[filtered_df['price'].astype(str).str.strip() != ""]
        if len(prices_with_values) > 0:
            min_price = safe_int_convert(prices_with_values["price"].min())
            st.metric("üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", f"{min_price} ‚Ç∏")
        else:
            st.metric("üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", "‚Äî")
    else:
        st.metric("üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", "‚Äî")
with col_info4:
    if len(filtered_df) > 0 and 'price' in filtered_df.columns:
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–æ–π
        prices_with_values = filtered_df[filtered_df['price'].astype(str).str.strip() != ""]
        if len(prices_with_values) > 0:
            max_price = safe_int_convert(prices_with_values["price"].max())
            st.metric("üíé –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", f"{max_price} ‚Ç∏")
        else:
            st.metric("üíé –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", "‚Äî")
    else:
        st.metric("üíé –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", "‚Äî")

st.divider()

# --- –°–µ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤ ---
st.markdown("## üëü –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤")

if len(filtered_df) == 0:
    st.warning("üîç –¢–æ–≤–∞—Ä—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    st.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
    
    if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã"):
        st.rerun()
else:
    # –ü–æ–ª—É—á–∞–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
    unique_models = get_unique_models(filtered_df)
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if sort_option == "–¶–µ–Ω–∞ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)":
        unique_models = unique_models.sort_values(by='price', key=lambda x: x.apply(lambda p: min(p) if p and any(p) else 0))
    elif sort_option == "–¶–µ–Ω–∞ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)":
        unique_models = unique_models.sort_values(by='price', key=lambda x: x.apply(lambda p: max(p) if p and any(p) else 0), ascending=False)
    elif sort_option == "–ù–∞–∑–≤–∞–Ω–∏–µ (–ê-–Ø)":
        unique_models = unique_models.sort_values(by='model_clean')
    elif sort_option == "–ù–∞–∑–≤–∞–Ω–∏–µ (–Ø-–ê)":
        unique_models = unique_models.sort_values(by='model_clean', ascending=False)
    
    if len(unique_models) == 0:
        st.warning("üîç –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    else:
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        if len(unique_models) > items_per_page:
            total_pages = (len(unique_models) - 1) // items_per_page + 1
            page = st.number_input("–°—Ç—Ä–∞–Ω–∏—Ü–∞", min_value=1, max_value=total_pages, value=1, key="pagination")
            start_idx = (page - 1) * items_per_page
            end_idx = start_idx + items_per_page
            paginated_models = unique_models.iloc[start_idx:end_idx]
            
            st.caption(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages} | –ü–æ–∫–∞–∑–∞–Ω–æ {len(paginated_models)} –∏–∑ {len(unique_models)} –º–æ–¥–µ–ª–µ–π")
        else:
            paginated_models = unique_models
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ 4 –º–æ–¥–µ–ª–∏ –≤ —Ä—è–¥
        num_cols = 4
        rows = [paginated_models.iloc[i:i+num_cols] for i in range(0, len(paginated_models), num_cols)]

        for i, row_df in enumerate(rows):
            cols = st.columns(num_cols)
            for col_idx, (_, model_row) in zip(cols, row_df.iterrows()):
                with col_idx:
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
                    with st.container():
                        st.markdown(
                            f"""
                            <div style="
                                border:1px solid #eee;
                                border-radius:16px;
                                padding:12px;
                                margin-bottom:16px;
                                background-color:#fff;
                                box-shadow:0 2px 10px rgba(0,0,0,0.05);
                            ">
                            """,
                            unsafe_allow_html=True
                        )
                        
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞
                        first_sku = model_row['sku']
                        first_image = model_row['image']
                        all_image_paths = get_image_paths_cached(first_image, first_sku)
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –ø—Ä–µ–≤—å—é
                        display_modern_cards(all_image_paths, f"{first_sku}_{i}_{col_idx}")
                        
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
                        st.markdown(f"**{model_row['brand']} {model_row['model_clean']}**")
                        st.caption(f"{model_row['color']} | {model_row['gender']}")
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
                        us_sizes = [str(size) for size in model_row['size_us'] if size and str(size).strip() != ""]
                        eu_sizes = [str(size) for size in model_row['size_eu'] if size and str(size).strip() != ""]
                        sizes_text = f"US: {', '.join(us_sizes)}" if us_sizes else "–†–∞–∑–º–µ—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
                        if eu_sizes:
                            sizes_text += f" | EU: {', '.join(eu_sizes)}"
                        
                        st.write(sizes_text)
                        
                        # –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
                        prices = model_row['price']
                        if prices and any(prices):
                            valid_prices = [p for p in prices if p != "" and str(p).strip() != ""]
                            if valid_prices:
                                min_price = min(valid_prices)
                                max_price = max(valid_prices)
                                price_text = f"{safe_int_convert(min_price)} - {safe_int_convert(max_price)} ‚Ç∏" if min_price != max_price else f"{safe_int_convert(min_price)} ‚Ç∏"
                            else:
                                price_text = "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                        else:
                            price_text = "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                        
                        st.markdown(f"**{price_text}**")
                        
                        st.markdown("</div>", unsafe_allow_html=True)
                    
                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
                    with st.expander("üìã –í—Å–µ —Ä–∞–∑–º–µ—Ä—ã", expanded=False):
                        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        model_variants = filtered_df[
                            (filtered_df['brand'] == model_row['brand']) & 
                            (filtered_df['model_clean'] == model_row['model_clean']) &
                            (filtered_df['color'] == model_row['color'])
                        ]
                        
                        for _, variant in model_variants.iterrows():
                            col1, col2, col3, col4 = st.columns([1, 1, 1, 1])
                            with col1:
                                st.text(f"US: {variant['size_us']}")
                            with col2:
                                st.text(f"EU: {variant['size_eu']}")
                            with col3:
                                price_val = variant['price']
                                if price_val and str(price_val).strip() != "":
                                    st.text(f"{safe_int_convert(price_val)} ‚Ç∏")
                                else:
                                    st.text("‚Äî")
                            with col4:
                                if st.button("üõí", key=f"cart_{variant['sku']}_{i}_{col_idx}", help="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"):
                                    add_to_cart({
                                        'brand': variant['brand'],
                                        'model_clean': variant['model_clean'],
                                        'size_us': variant['size_us'],
                                        'size_eu': variant['size_eu'],
                                        'price': variant['price'],
                                        'sku': variant['sku']
                                    })

st.divider()
st.caption("¬© DENE Store 2025")