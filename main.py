df = load_data()

# --- –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ---
st.sidebar.write("üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
st.sidebar.write("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã:", df.columns.tolist())
st.sidebar.write("–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:", len(df))

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫—É image
if "image" in df.columns:
    st.sidebar.write("---")
    st.sidebar.write("üì∑ –ê–ù–ê–õ–ò–ó –ö–û–õ–û–ù–ö–ò IMAGE:")
    st.sidebar.write("–ü—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π:", df["image"].head(5).tolist())
    st.sidebar.write("–ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:", df["image"].isna().sum())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    st.sidebar.write("---")
    st.sidebar.write("üìÅ –°–¢–†–£–ö–¢–£–†–ê –ü–ê–ü–ö–ò –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò:")
    all_image_files = glob.glob(os.path.join(IMAGES_PATH, "**", "*"), recursive=True)
    image_files = [f for f in all_image_files if f.lower().endswith(('.jpg', '.jpeg', '.png', '.webp'))]
    st.sidebar.write(f"–í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ: {len(image_files)}")
    
    if image_files:
        st.sidebar.write("–ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤:")
        for f in image_files[:5]:
            st.sidebar.write(f" - {os.path.basename(f)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 —Ç–æ–≤–∞—Ä–æ–≤
    st.sidebar.write("---")
    st.sidebar.write("üîé –¢–ï–°–¢ –ü–û–ò–°–ö–ê –§–ê–ô–õ–û–í:")
    for i, (_, row) in enumerate(df.head(3).iterrows()):
        image_name = row["image"]
        st.sidebar.write(f"–¢–æ–≤–∞—Ä {i+1}: '{image_name}'")
        
        if image_name and str(image_name).strip():
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
            image_name = str(image_name).strip()
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
            found_files = []
            for ext in ['.jpg', '.jpeg', '.png', '.webp']:
                pattern = os.path.join(IMAGES_PATH, "**", f"{image_name}{ext}")
                files = glob.glob(pattern, recursive=True)
                found_files.extend(files)
                
                # –í–∞—Ä–∏–∞–Ω—Ç 2: —Ñ–∞–π–ª—ã –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å —ç—Ç–æ–≥–æ –∏–º–µ–Ω–∏
                pattern_start = os.path.join(IMAGES_PATH, "**", f"{image_name}*{ext}")
                files_start = glob.glob(pattern_start, recursive=True)
                found_files.extend(files_start)
            
            if found_files:
                st.sidebar.write(f"  ‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã:")
                for f in found_files:
                    st.sidebar.write(f"    - {os.path.basename(f)}")
            else:
                st.sidebar.write(f"  ‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –≤ –ø–∞–ø–∫–µ
                similar_files = [f for f in image_files if image_name in os.path.basename(f).lower()]
                if similar_files:
                    st.sidebar.write(f"  –ü–æ—Ö–æ–∂–∏–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ:")
                    for f in similar_files[:3]:
                        st.sidebar.write(f"    - {os.path.basename(f)}")
        else:
            st.sidebar.write(f"  ‚ö†Ô∏è –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º ---
def debug_get_image_path(image_name):
    """–í–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    if not image_name or pd.isna(image_name) or str(image_name).strip() == "":
        st.sidebar.write(f"üîç DEBUG: –ü—É—Å—Ç–æ–µ –∏–º—è —Ñ–∞–π–ª–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º no_image")
        return os.path.join(IMAGES_PATH, "no_image.jpg")
    
    image_name = str(image_name).strip()
    st.sidebar.write(f"üîç DEBUG: –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ '{image_name}'")
    
    # –ò—â–µ–º —Ñ–∞–π–ª —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
    for ext in ['.jpg', '.jpeg', '.png', '.webp']:
        pattern = os.path.join(IMAGES_PATH, "**", f"{image_name}{ext}")
        image_files = glob.glob(pattern, recursive=True)
        if image_files:
            st.sidebar.write(f"‚úÖ DEBUG: –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª {image_files[0]}")
            return image_files[0]
        
        # –¢–∞–∫–∂–µ –∏—â–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —ç—Ç–æ–≥–æ –∏–º–µ–Ω–∏
        pattern_start = os.path.join(IMAGES_PATH, "**", f"{image_name}*{ext}")
        image_files = glob.glob(pattern_start, recursive=True)
        if image_files:
            st.sidebar.write(f"‚úÖ DEBUG: –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ø–æ —à–∞–±–ª–æ–Ω—É {image_files[0]}")
            return image_files[0]
    
    st.sidebar.write(f"‚ùå DEBUG: –§–∞–π–ª '{image_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return os.path.join(IMAGES_PATH, "no_image.jpg")

# –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
get_image_path = debug_get_image_path

# --- –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
st.divider()
st.markdown("### üîé –§–∏–ª—å—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞")

col1, col2, col3, col4, col5, col6 = st.columns(6)
brand_filter = col1.selectbox("–ë—Ä–µ–Ω–¥", ["–í—Å–µ"] + sorted(df["brand"].unique().tolist()))

# ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π