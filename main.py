import streamlit as st
import pandas as pd
import glob
import os
import re
import base64

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(page_title="DENE Store", layout="wide")

# --- –û–±–ª–æ–∂–∫–∞ ---
st.image("data/images/banner.jpg", width="stretch")
st.markdown("<h1 style='text-align:center; white-space: nowrap;'>DENE Store. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h1>", unsafe_allow_html=True)

# --- –ü—É—Ç–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
CATALOG_PATH = "data/catalog.xlsx"
IMAGES_PATH = "data/images"

# --- –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ US ‚Üî EU ---
size_conversion = {
    "6": "39", "6.5": "39.5", "7": "40", "7.5": "40.5",
    "8": "41", "8.5": "42", "9": "42.5", "9.5": "43",
    "10": "44", "10.5": "44.5", "11": "45", "11.5": "46", "12": "46.5"
}
reverse_conversion = {v: k for k, v in size_conversion.items()}

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ ---
def get_image_path(image_names):
    """–ò—â–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ image (–±–µ—Ä–µ—Ç –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞)"""
    if not image_names or pd.isna(image_names) or str(image_names).strip() == "":
        return os.path.join(IMAGES_PATH, "no_image.jpg")
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ
    image_names_list = str(image_names).strip().split()
    if not image_names_list:
        return os.path.join(IMAGES_PATH, "no_image.jpg")
    
    first_image_name = image_names_list[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    
    # –ò—â–µ–º —Ñ–∞–π–ª —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
    for ext in ['.jpg', '.jpeg', '.png', '.webp']:
        pattern = os.path.join(IMAGES_PATH, "**", f"{first_image_name}{ext}")
        image_files = glob.glob(pattern, recursive=True)
        if image_files:
            return image_files[0]
        
        # –¢–∞–∫–∂–µ –∏—â–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —ç—Ç–æ–≥–æ –∏–º–µ–Ω–∏
        pattern_start = os.path.join(IMAGES_PATH, "**", f"{first_image_name}*{ext}")
        image_files = glob.glob(pattern_start, recursive=True)
        if image_files:
            return image_files[0]
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º no_image
    return os.path.join(IMAGES_PATH, "no_image.jpg")

def get_all_images_for_product(image_names):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
    if not image_names or pd.isna(image_names) or str(image_names).strip() == "":
        return [os.path.join(IMAGES_PATH, "no_image.jpg")]
    
    image_names_list = str(image_names).strip().split()
    all_images = []
    
    for image_name in image_names_list:
        found = False
        for ext in ['.jpg', '.jpeg', '.png', '.webp']:
            pattern = os.path.join(IMAGES_PATH, "**", f"{image_name}{ext}")
            image_files = glob.glob(pattern, recursive=True)
            if image_files:
                all_images.append(image_files[0])
                found = True
                break
        
        if not found:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º no_image
            all_images.append(os.path.join(IMAGES_PATH, "no_image.jpg"))
    
    return all_images if all_images else [os.path.join(IMAGES_PATH, "no_image.jpg")]

def get_image_base64(image_path):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64 –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ HTML"""
    try:
        with open(image_path, "rb") as img_file:
            return base64.b64encode(img_file.read()).decode("utf-8")
    except Exception:
        fallback = os.path.join(IMAGES_PATH, "no_image.jpg")
        with open(fallback, "rb") as img_file:
            return base64.b64encode(img_file.read()).decode("utf-8")

def get_similar_products(df, current_product):
    """–ù–∞—Ö–æ–¥–∏—Ç —Ç–æ–≤–∞—Ä—ã —Ç–æ–π –∂–µ –º–æ–¥–µ–ª–∏ –Ω–æ –¥—Ä—É–≥–∏—Ö —Ü–≤–µ—Ç–æ–≤"""
    similar = df[
        (df["model_clean"] == current_product["model_clean"]) &
        (df["brand"] == current_product["brand"]) &
        (df["sku"] != current_product["sku"])
    ]
    return similar

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data(show_spinner=False)
def load_data():
    # –ß–∏—Ç–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã Excel —Ñ–∞–π–ª–∞
    all_sheets = pd.read_excel(CATALOG_PATH, sheet_name=None)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã –≤ –æ–¥–∏–Ω DataFrame
    df_list = []
    for sheet_name, sheet_data in all_sheets.items():
        st.sidebar.write(f"üìã –õ–∏—Å—Ç '{sheet_name}': {len(sheet_data)} —Ç–æ–≤–∞—Ä–æ–≤")
        df_list.append(sheet_data)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    df = pd.concat(df_list, ignore_index=True)
    df = df.fillna("")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–∏
    df["model_clean"] = (
        df["model"]
        .str.replace(r"\d{1,2}(\.\d)?(US|EU)", "", regex=True)
        .str.strip()
    )

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
    df["size_us"] = df["model"].apply(lambda x: re.search(r"(\d{1,2}(\.\d)?)(?=US)", x))
    df["size_us"] = df["size_us"].apply(lambda m: m.group(1) if m else "")
    df["size_eu"] = df["model"].apply(lambda x: re.search(r"(\d{2}(\.\d)?)(?=EU)", x))
    df["size_eu"] = df["size_eu"].apply(lambda m: m.group(1) if m else "")

    # –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤
    df["size_eu"] = df.apply(lambda r: size_conversion.get(r["size_us"], r["size_eu"]), axis=1)
    df["size_us"] = df.apply(lambda r: reverse_conversion.get(r["size_eu"], r["size_us"]), axis=1)

    # –ü–æ–ª –∏ —Ü–≤–µ—Ç
    df["gender"] = df["model"].apply(
        lambda x: "men" if "men" in x.lower() else (
            "women" if "women" in x.lower() else "unisex"
        )
    )
    df["color"] = df["model"].str.extract(
        r"(white|black|blue|red|green|pink|gray|brown)", expand=False
    ).fillna("other")

    # –û–ø–∏—Å–∞–Ω–∏–µ
    if "description" not in df.columns:
        df["description"] = "–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."

    # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ —Ü–µ–Ω—ã –∏–ª–∏ –º–æ–¥–µ–ª–∏
    df = df[df["price"].astype(str).str.strip() != ""]
    df = df[df["model_clean"].astype(str).str.strip() != ""]

    return df

# --- –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ---
df = load_data()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω ---
if 'selected_product' not in st.session_state:
    st.session_state.selected_product = None
if 'current_image_index' not in st.session_state:
    st.session_state.current_image_index = 0

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏ ---
def open_product_modal(product):
    st.session_state.selected_product = product
    st.session_state.current_image_index = 0

def close_modal():
    st.session_state.selected_product = None
    st.session_state.current_image_index = 0

def next_image():
    if st.session_state.selected_product:
        all_images = get_all_images_for_product(st.session_state.selected_product["image"])
        st.session_state.current_image_index = (st.session_state.current_image_index + 1) % len(all_images)

def prev_image():
    if st.session_state.selected_product:
        all_images = get_all_images_for_product(st.session_state.selected_product["image"])
        st.session_state.current_image_index = (st.session_state.current_image_index - 1) % len(all_images)

# --- –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ---
st.sidebar.write("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
st.sidebar.write("–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:", len(df))
st.sidebar.write("–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥—ã:", df["brand"].nunique())
st.sidebar.write("–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏:", df["model_clean"].nunique())

# --- –§–∏–ª—å—Ç—Ä—ã ---
st.divider()
st.markdown("### üîé –§–∏–ª—å—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞")

col1, col2, col3, col4, col5, col6 = st.columns(6)
brand_filter = col1.selectbox("–ë—Ä–µ–Ω–¥", ["–í—Å–µ"] + sorted(df["brand"].unique().tolist()))
filtered_df = df if brand_filter == "–í—Å–µ" else df[df["brand"] == brand_filter]

models = sorted(filtered_df["model_clean"].unique().tolist())
model_filter = col2.selectbox("–ú–æ–¥–µ–ª—å", ["–í—Å–µ"] + models)

size_us_filter = col3.selectbox("–†–∞–∑–º–µ—Ä (US)", ["–í—Å–µ"] + sorted(df["size_us"].dropna().unique().tolist()))
size_eu_filter = col4.selectbox("–†–∞–∑–º–µ—Ä (EU)", ["–í—Å–µ"] + sorted(df["size_eu"].dropna().unique().tolist()))
gender_filter = col5.selectbox("–ü–æ–ª", ["–í—Å–µ", "men", "women", "unisex"])
color_filter = col6.selectbox("–¶–≤–µ—Ç", ["–í—Å–µ"] + sorted(df["color"].dropna().unique().tolist()))

# --- –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã ---
filtered_df = df.copy()
if brand_filter != "–í—Å–µ":
    filtered_df = filtered_df[filtered_df["brand"] == brand_filter]
if model_filter != "–í—Å–µ":
    filtered_df = filtered_df[filtered_df["model_clean"] == model_filter]
if size_us_filter != "–í—Å–µ":
    eu_equiv = size_conversion.get(size_us_filter, "")
    filtered_df = filtered_df[
        (filtered_df["size_us"] == size_us_filter) | (filtered_df["size_eu"] == eu_equiv)
    ]
if size_eu_filter != "–í—Å–µ":
    us_equiv = reverse_conversion.get(size_eu_filter, "")
    filtered_df = filtered_df[
        (filtered_df["size_eu"] == size_eu_filter) | (filtered_df["size_us"] == us_equiv)
    ]
if gender_filter != "–í—Å–µ":
    filtered_df = filtered_df[filtered_df["gender"] == gender_filter]
if color_filter != "–í—Å–µ":
    filtered_df = filtered_df[filtered_df["color"] == color_filter]

st.divider()

# --- –°–µ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤ ---
st.markdown("## üëü –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤")

if len(filtered_df) == 0:
    st.warning("üö´ –¢–æ–≤–∞—Ä—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
else:
    st.write(f"**–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(filtered_df)}**")
    
    num_cols = 4
    rows = [filtered_df.iloc[i:i+num_cols] for i in range(0, len(filtered_df), num_cols)]

    for row_df in rows:
        cols = st.columns(num_cols)
        for col, (_, row) in zip(cols, row_df.iterrows()):
            with col:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–æ–Ω–∫—É 'image' —Å –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤
                image_path = get_image_path(row["image"])
                image_base64 = get_image_base64(image_path)

                # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ —Å –∫–ª–∏–∫–æ–º
                st.markdown(
                    f"""
                    <div style="
                        border:1px solid #eee;
                        border-radius:16px;
                        padding:12px;
                        margin-bottom:16px;
                        background-color:#fff;
                        box-shadow:0 2px 10px rgba(0,0,0,0.05);
                        transition:transform 0.2s ease-in-out;
                        cursor:pointer;
                    " onclick="
                        const event = new CustomEvent('productClick', {{detail: {row.to_dict()}}});
                        window.parent.document.dispatchEvent(event);
                    " onmouseover="this.style.transform='scale(1.02)';"
                      onmouseout="this.style.transform='scale(1)';">
                        <img src="data:image/jpeg;base64,{image_base64}" 
                             style='width:100%; border-radius:12px; object-fit:cover; height:220px;'>
                        <h4 style="margin:10px 0 4px 0;">{row['brand']} {row['model_clean']}</h4>
                        <p style="color:gray; font-size:13px; margin:0;">
                            US {row['size_us'] or '-'} | EU {row['size_eu'] or '-'} | {row['color']}
                        </p>
                        <p style="font-size:14px; color:#555;">{row['description'][:100]}{'...' if len(row['description']) > 100 else ''}</p>
                        <p style="font-weight:bold; font-size:16px; margin-top:6px;">{int(row['price'])} ‚Ç∏</p>
                    </div>
                    """,
                    unsafe_allow_html=True
                )

                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                if st.button("üëÄ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", key=f"btn_{row['sku']}", use_container_width=True):
                    open_product_modal(row.to_dict())

# --- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ç–æ–≤–∞—Ä–∞ ---
if st.session_state.selected_product:
    product = st.session_state.selected_product
    all_images = get_all_images_for_product(product["image"])
    similar_products = get_similar_products(df, product)
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    st.markdown(
        """
        <style>
        .modal-backdrop {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 999;
        }
        .modal-content {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 20px;
            border-radius: 15px;
            z-index: 1000;
            max-width: 90%;
            max-height: 90%;
            overflow-y: auto;
        }
        </style>
        """,
        unsafe_allow_html=True
    )
    
    # –§–æ–Ω –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    st.markdown('<div class="modal-backdrop" onclick="window.parent.document.dispatchEvent(new CustomEvent(\'closeModal\'))"></div>', unsafe_allow_html=True)
    
    # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    with st.container():
        col1, col2 = st.columns([1, 1])
        
        with col1:
            # –ì–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            st.markdown("### üì∑ –ì–∞–ª–µ—Ä–µ—è")
            current_image = all_images[st.session_state.current_image_index]
            current_image_base64 = get_image_base64(current_image)
            
            st.markdown(
                f"""
                <div style="text-align: center;">
                    <img src="data:image/jpeg;base64,{current_image_base64}" 
                         style='width:100%; border-radius:12px; max-height:400px; object-fit:contain;'>
                </div>
                """,
                unsafe_allow_html=True
            )
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
            if len(all_images) > 1:
                col_nav1, col_nav2, col_nav3 = st.columns([1, 2, 1])
                with col_nav1:
                    if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", use_container_width=True):
                        prev_image()
                with col_nav2:
                    st.markdown(f"<div style='text-align: center; padding: 10px;'>{st.session_state.current_image_index + 1} / {len(all_images)}</div>", unsafe_allow_html=True)
                with col_nav3:
                    if st.button("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", use_container_width=True):
                        next_image()
                
                # –ú–∏–Ω–∏–∞—Ç—é—Ä—ã
                st.markdown("#### –ú–∏–Ω–∏–∞—Ç—é—Ä—ã:")
                thumb_cols = st.columns(min(5, len(all_images)))
                for idx, (thumb_col, img_path) in enumerate(zip(thumb_cols, all_images)):
                    with thumb_col:
                        thumb_base64 = get_image_base64(img_path)
                        st.markdown(
                            f"""
                            <div style="border: {'2px solid #007bff' if idx == st.session_state.current_image_index else '1px solid #ddd'}; 
                                        border-radius:8px; padding:2px; cursor:pointer;"
                                 onclick="window.parent.document.dispatchEvent(new CustomEvent('changeImage', {{detail: {idx}}}))">
                                <img src="data:image/jpeg;base64,{thumb_base64}" 
                                     style='width:100%; border-radius:6px; height:60px; object-fit:cover;'>
                            </div>
                            """,
                            unsafe_allow_html=True
                        )
                        if st.button("–í—ã–±—Ä–∞—Ç—å", key=f"thumb_{idx}", use_container_width=True):
                            st.session_state.current_image_index = idx
        
        with col2:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
            st.markdown("### üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ")
            st.markdown(f"**–ë—Ä–µ–Ω–¥:** {product['brand']}")
            st.markdown(f"**–ú–æ–¥–µ–ª—å:** {product['model_clean']}")
            st.markdown(f"**–¶–≤–µ—Ç:** {product['color']}")
            st.markdown(f"**–†–∞–∑–º–µ—Ä US:** {product['size_us'] or '-'}")
            st.markdown(f"**–†–∞–∑–º–µ—Ä EU:** {product['size_eu'] or '-'}")
            st.markdown(f"**–ü–æ–ª:** {product['gender']}")
            st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {product['description']}")
            st.markdown(f"**–¶–µ–Ω–∞:** **{int(product['price'])} ‚Ç∏**")
            
            # –î—Ä—É–≥–∏–µ —Ü–≤–µ—Ç–∞
            if not similar_products.empty:
                st.markdown("### üé® –î—Ä—É–≥–∏–µ —Ü–≤–µ—Ç–∞")
                for _, similar in similar_products.iterrows():
                    similar_image = get_image_path(similar["image"])
                    similar_base64 = get_image_base64(similar_image)
                    
                    col_sim1, col_sim2 = st.columns([1, 3])
                    with col_sim1:
                        st.markdown(
                            f"""
                            <img src="data:image/jpeg;base64,{similar_base64}" 
                                 style='width:100%; border-radius:8px; height:60px; object-fit:cover;'>
                            """,
                            unsafe_allow_html=True
                        )
                    with col_sim2:
                        st.markdown(f"**–¶–≤–µ—Ç:** {similar['color']}")
                        st.markdown(f"**–¶–µ–Ω–∞:** {int(similar['price'])} ‚Ç∏")
                        if st.button("–í—ã–±—Ä–∞—Ç—å", key=f"similar_{similar['sku']}", use_container_width=True):
                            open_product_modal(similar.to_dict())
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        st.markdown("---")
        if st.button("‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å", use_container_width=True):
            close_modal()

# --- JavaScript –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤ ---
st.markdown(
    """
    <script>
    window.addEventListener('load', function() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞
        window.parent.document.addEventListener('productClick', function(e) {
            const product = e.detail;
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Streamlit
            console.log('Product clicked:', product);
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        window.parent.document.addEventListener('closeModal', function() {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–∫—Ä—ã—Ç–∏—è –≤ Streamlit
            console.log('Close modal');
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        window.parent.document.addEventListener('changeImage', function(e) {
            const index = e.detail;
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            console.log('Change image to:', index);
        });
    });
    </script>
    """,
    unsafe_allow_html=True
)

st.divider()
st.caption("¬© DENE Store 2025")