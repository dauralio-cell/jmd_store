import streamlit as st
import pandas as pd
import glob
import os
import re
import base64
import json

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(page_title="DENE Store", layout="wide")

# --- –û–±–ª–æ–∂–∫–∞ ---
st.image("data/images/banner.jpg", width="stretch")
st.markdown("<h1 style='text-align:center; white-space: nowrap;'>DENE Store. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h1>", unsafe_allow_html=True)

# --- –ü—É—Ç–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
CATALOG_PATH = "data/catalog.xlsx"
IMAGES_PATH = "data/images"

# --- –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ US ‚Üî EU ---
size_conversion = {
    "6": "39", "6.5": "39.5", "7": "40", "7.5": "40.5",
    "8": "41", "8.5": "42", "9": "42.5", "9.5": "43",
    "10": "44", "10.5": "44.5", "11": "45", "11.5": "46", "12": "46.5"
}
reverse_conversion = {v: k for k, v in size_conversion.items()}

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ ---
def get_image_path(sku):
    """–ò—â–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ SKU –≤–æ –≤—Å–µ—Ö –ø–æ–¥–ø–∞–ø–∫–∞—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∏–ª–∏ no_image.jpg"""
    if pd.isna(sku) or sku == "":
        return os.path.join(IMAGES_PATH, "no_image.jpg")
    
    pattern_jpg = os.path.join(IMAGES_PATH, "**", f"{sku}_*.jpg")
    pattern_webp = os.path.join(IMAGES_PATH, "**", f"{sku}_*.webp")
    image_files = glob.glob(pattern_jpg, recursive=True) + glob.glob(pattern_webp, recursive=True)
    if image_files:
        return image_files[0]
    else:
        return os.path.join(IMAGES_PATH, "no_image.jpg")

def get_image_base64(image_path):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64 –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ HTML"""
    try:
        with open(image_path, "rb") as img_file:
            return base64.b64encode(img_file.read()).decode("utf-8")
    except Exception:
        fallback = os.path.join(IMAGES_PATH, "no_image.jpg")
        with open(fallback, "rb") as img_file:
            return base64.b64encode(img_file.read()).decode("utf-8")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–µ–π ---
def get_unique_models(df):
    """–ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º –º–æ–¥–µ–ª–∏
    grouped = df.groupby(['brand', 'model_clean', 'gender', 'color']).agg({
        'SKU': 'first',  # –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π SKU –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        'price': lambda x: list(x.unique()),  # –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
        'size_us': list,  # –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã US
        'size_eu': list   # –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã EU
    }).reset_index()
    
    return grouped

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data(show_spinner=False)
def load_data():
    try:
        # –ß–∏—Ç–∞–µ–º –æ–±–∞ –ª–∏—Å—Ç–∞
        df_nike = pd.read_excel(CATALOG_PATH, sheet_name='Nike')
        df_mizuno = pd.read_excel(CATALOG_PATH, sheet_name='Mizuno')
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        df = pd.concat([df_nike, df_mizuno], ignore_index=True)
        df = df.fillna("")

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±—Ä–µ–Ω–¥–µ –∏ –º–æ–¥–µ–ª–∏
        df['brand'] = df['brand'].fillna(method='ffill')
        df['model'] = df['model'].fillna(method='ffill')
        df['gender'] = df['gender'].fillna(method='ffill')
        df['color'] = df['color'].fillna(method='ffill')

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–∏
        df["model_clean"] = (
            df["model"]
            .str.replace(r"\d{1,2}(\.\d)?(US|EU)", "", regex=True)
            .str.strip()
        )

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
        df["size_us"] = df["model"].apply(lambda x: re.search(r"(\d{1,2}(\.\d)?)(?=US)", str(x)))
        df["size_us"] = df["size_us"].apply(lambda m: m.group(1) if m else "")
        df["size_eu"] = df["model"].apply(lambda x: re.search(r"(\d{2}(\.\d)?)(?=EU)", str(x)))
        df["size_eu"] = df["size_eu"].apply(lambda m: m.group(1) if m else "")

        # –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤
        df["size_eu"] = df.apply(lambda r: size_conversion.get(r["size_us"], r["size_eu"]), axis=1)
        df["size_us"] = df.apply(lambda r: reverse_conversion.get(r["size_eu"], r["size_us"]), axis=1)

        # –ü–æ–ª –∏ —Ü–≤–µ—Ç
        df["gender"] = df["model"].apply(
            lambda x: "men" if "men" in str(x).lower() else (
                "women" if "women" in str(x).lower() else "unisex"
            )
        )
        df["color"] = df["model"].str.extract(
            r"(white|black|blue|red|green|pink|gray|brown)", flags=re.IGNORECASE, expand=False
        ).fillna("other")

        # –û–ø–∏—Å–∞–Ω–∏–µ
        if "description" not in df.columns:
            df["description"] = "–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–ª–∏—á–∏—é —Ç–æ–≤–∞—Ä–∞ (–∫–æ–ª–æ–Ω–∫–∞ 'yes')
        if 'yes' in df.columns:
            df = df[df['yes'].str.lower() == 'yes']
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ —Ü–µ–Ω—ã –∏–ª–∏ –º–æ–¥–µ–ª–∏
        df = df[df["price"].astype(str).str.strip() != ""]
        df = df[df["model_clean"].astype(str).str.strip() != ""]

        return df
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()

# --- –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ ---
df = load_data()

# --- –§–∏–ª—å—Ç—Ä—ã ---
st.divider()
st.markdown("### üîé –§–∏–ª—å—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞")

col1, col2, col3, col4, col5, col6 = st.columns(6)

# –ë—Ä–µ–Ω–¥
available_brands = ["–í—Å–µ"] + sorted(df["brand"].unique().tolist())
brand_filter = col1.selectbox("–ë—Ä–µ–Ω–¥", available_brands)

# –ú–æ–¥–µ–ª—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞
if brand_filter != "–í—Å–µ":
    brand_models = sorted(df[df["brand"] == brand_filter]["model_clean"].unique().tolist())
else:
    brand_models = sorted(df["model_clean"].unique().tolist())
model_filter = col2.selectbox("–ú–æ–¥–µ–ª—å", ["–í—Å–µ"] + brand_models)

# –†–∞–∑–º–µ—Ä—ã
available_sizes_us = ["–í—Å–µ"] + sorted(df["size_us"].dropna().unique().tolist())
available_sizes_eu = ["–í—Å–µ"] + sorted(df["size_eu"].dropna().unique().tolist())
size_us_filter = col3.selectbox("–†–∞–∑–º–µ—Ä (US)", available_sizes_us)
size_eu_filter = col4.selectbox("–†–∞–∑–º–µ—Ä (EU)", available_sizes_eu)

# –ü–æ–ª –∏ —Ü–≤–µ—Ç
gender_filter = col5.selectbox("–ü–æ–ª", ["–í—Å–µ", "men", "women", "unisex"])
color_filter = col6.selectbox("–¶–≤–µ—Ç", ["–í—Å–µ"] + sorted(df["color"].dropna().unique().tolist()))

# --- –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã ---
filtered_df = df.copy()
if brand_filter != "–í—Å–µ":
    filtered_df = filtered_df[filtered_df["brand"] == brand_filter]
if model_filter != "–í—Å–µ":
    filtered_df = filtered_df[filtered_df["model_clean"] == model_filter]
if size_us_filter != "–í—Å–µ":
    eu_equiv = size_conversion.get(size_us_filter, "")
    filtered_df = filtered_df[
        (filtered_df["size_us"] == size_us_filter) | (filtered_df["size_eu"] == eu_equiv)
    ]
if size_eu_filter != "–í—Å–µ":
    us_equiv = reverse_conversion.get(size_eu_filter, "")
    filtered_df = filtered_df[
        (filtered_df["size_eu"] == size_eu_filter) | (filtered_df["size_us"] == us_equiv)
    ]
if gender_filter != "–í—Å–µ":
    filtered_df = filtered_df[filtered_df["gender"] == gender_filter]
if color_filter != "–í—Å–µ":
    filtered_df = filtered_df[filtered_df["color"] == color_filter]

st.divider()

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
col_info1, col_info2, col_info3, col_info4 = st.columns(4)
with col_info1:
    st.metric("üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤", len(filtered_df))
with col_info2:
    st.metric("üè∑Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π", filtered_df["model_clean"].nunique())
with col_info3:
    if len(filtered_df) > 0:
        min_price = int(filtered_df["price"].min())
        st.metric("üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", f"{min_price} ‚Ç∏")
    else:
        st.metric("üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", "‚Äî")
with col_info4:
    if len(filtered_df) > 0:
        max_price = int(filtered_df["price"].max())
        st.metric("üíé –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", f"{max_price} ‚Ç∏")
    else:
        st.metric("üíé –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", "‚Äî")

st.divider()

# --- –°–µ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤ ---
st.markdown("## üëü –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤")

if len(filtered_df) == 0:
    st.warning("üîç –¢–æ–≤–∞—Ä—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    st.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
    
    if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã"):
        st.experimental_rerun()
else:
    # –ü–æ–ª—É—á–∞–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
    unique_models = get_unique_models(filtered_df)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ 4 –º–æ–¥–µ–ª–∏ –≤ —Ä—è–¥
    num_cols = 4
    rows = [unique_models.iloc[i:i+num_cols] for i in range(0, len(unique_models), num_cols)]

    for row_df in rows:
        cols = st.columns(num_cols)
        for col, (_, model_row) in zip(cols, row_df.iterrows()):
            with col:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π SKU –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                first_sku = model_row['SKU']
                image_path = get_image_path(first_sku)
                image_base64 = get_image_base64(image_path)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
                us_sizes = [str(size) for size in model_row['size_us'] if size]
                eu_sizes = [str(size) for size in model_row['size_eu'] if size]
                sizes_text = f"US: {', '.join(us_sizes)}" if us_sizes else "–†–∞–∑–º–µ—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
                if eu_sizes:
                    sizes_text += f" | EU: {', '.join(eu_sizes)}"
                
                # –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
                prices = model_row['price']
                if prices and any(prices):
                    valid_prices = [p for p in prices if p != ""]
                    if valid_prices:
                        min_price = min(valid_prices)
                        max_price = max(valid_prices)
                        price_text = f"{int(min_price)} - {int(max_price)} ‚Ç∏" if min_price != max_price else f"{int(min_price)} ‚Ç∏"
                    else:
                        price_text = "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                else:
                    price_text = "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

                st.markdown(
                    f"""
                    <div style="
                        border:1px solid #eee;
                        border-radius:16px;
                        padding:12px;
                        margin-bottom:16px;
                        background-color:#fff;
                        box-shadow:0 2px 10px rgba(0,0,0,0.05);
                        transition:transform 0.2s ease-in-out;
                    " onmouseover="this.style.transform='scale(1.02)';"
                      onmouseout="this.style.transform='scale(1)';">
                        <img src="data:image/jpeg;base64,{image_base64}" 
                             style='width:100%; border-radius:12px; object-fit:cover; height:220px;'>
                        <h4 style="margin:10px 0 4px 0;">{model_row['brand']} {model_row['model_clean']}</h4>
                        <p style="color:gray; font-size:13px; margin:0;">
                            {model_row['color']} | {model_row['gender']}
                        </p>
                        <p style="font-size:12px; color:#666; margin:4px 0;">
                            {sizes_text}
                        </p>
                        <p style="font-weight:bold; font-size:16px; margin-top:6px;">{price_text}</p>
                    </div>
                    """,
                    unsafe_allow_html=True
                )
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
                with st.expander("üìã –í—Å–µ —Ä–∞–∑–º–µ—Ä—ã", expanded=False):
                    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    model_variants = filtered_df[
                        (filtered_df['brand'] == model_row['brand']) & 
                        (filtered_df['model_clean'] == model_row['model_clean']) &
                        (filtered_df['color'] == model_row['color'])
                    ]
                    
                    for _, variant in model_variants.iterrows():
                        col1, col2, col3 = st.columns([1, 1, 2])
                        with col1:
                            st.text(f"US: {variant['size_us']}")
                        with col2:
                            st.text(f"EU: {variant['size_eu']}")
                        with col3:
                            price_val = variant['price']
                            if price_val and price_val != "":
                                st.text(f"{int(price_val)} ‚Ç∏")
                            else:
                                st.text("–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
                            if st.button("üõí", key=f"cart_{variant['SKU']}", help="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"):
                                st.success(f"–î–æ–±–∞–≤–ª–µ–Ω —Ä–∞–∑–º–µ—Ä {variant['size_us']}US")

st.divider()
st.caption("¬© DENE Store 2025")