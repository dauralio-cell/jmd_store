import streamlit as st
import pandas as pd
import os
from PIL import Image

# ==============================
# üåü –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
# ==============================
st.set_page_config(page_title="DENE Store", layout="wide")

# ==============================
# üåÑ –ë–∞–Ω–Ω–µ—Ä
# ==============================
banner_path = "data/images/banner.jpg"
if os.path.exists(banner_path):
    st.image(banner_path, use_container_width=True)
else:
    st.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª banner.jpg –≤ data/images/")

st.markdown(
    "<h1 style='text-align:center; white-space: nowrap;'>DENE Store</h1>",
    unsafe_allow_html=True
)

# ==============================
# üìä –ó–∞–≥—Ä—É–∑–∫–∞ Excel –∫–∞—Ç–∞–ª–æ–≥–∞
# ==============================
excel_path = "data/catalog.xlsx"
if not os.path.exists(excel_path):
    st.error("‚ùå –§–∞–π–ª –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –≤ data/catalog.xlsx")
    st.stop()

# –°—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã
xls = pd.ExcelFile(excel_path)
all_data = []

for sheet_name in xls.sheet_names:
    df = pd.read_excel(xls, sheet_name=sheet_name)
    df["brand"] = sheet_name  # –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏–º—è –ª–∏—Å—Ç–∞ –∫–∞–∫ –±—Ä–µ–Ω–¥, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    all_data.append(df)

df = pd.concat(all_data, ignore_index=True)

# –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –∫–æ–ª–æ–Ω–æ–∫
df.columns = df.columns.str.strip()

# ==============================
# üîç –§—É–Ω–∫—Ü–∏–∏
# ==============================
def find_image(name):
    """–ò—â–µ—Ç –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ data/images/ –ø–æ SKU –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é."""
    for ext in [".jpg", ".jpeg", ".png", ".webp"]:
        path = f"data/images/{name}{ext}"
        if os.path.exists(path):
            return path
    return "data/images/no_image.jpg"

def get_first_image(image_str):
    if pd.isna(image_str) or not image_str:
        return "data/images/no_image.jpg"
    first_name = str(image_str).split()[0]
    return find_image(first_name)

# ==============================
# üéõ –§–∏–ª—å—Ç—Ä—ã
# ==============================
brands = sorted(df["brand"].dropna().unique())
models = sorted(df["model"].dropna().unique())
genders = sorted(df["gender"].dropna().unique())
sizes = sorted(df["size US"].dropna().unique())

col1, col2, col3, col4 = st.columns(4)
brand_filter = col1.multiselect("–ë—Ä–µ–Ω–¥", brands)
model_filter = col2.multiselect("–ú–æ–¥–µ–ª—å", models)
gender_filter = col3.multiselect("–ü–æ–ª", genders)
size_filter = col4.multiselect("–†–∞–∑–º–µ—Ä US", sizes)

filtered_df = df.copy()
if brand_filter:
    filtered_df = filtered_df[filtered_df["brand"].isin(brand_filter)]
if model_filter:
    filtered_df = filtered_df[filtered_df["model"].isin(model_filter)]
if gender_filter:
    filtered_df = filtered_df[filtered_df["gender"].isin(gender_filter)]
if size_filter:
    filtered_df = filtered_df[filtered_df["size US"].isin(size_filter)]

# ==============================
# üß© –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–≤–µ—Ç–∞–º
# ==============================
grouped = (
    filtered_df.groupby(["brand", "model", "gender", "color"], dropna=False)
    .agg({
        "image": "first",
        "description": "first",
        "price": "first",
        "in stock": "first",
        "preorder": "first",
        "size US": lambda x: sorted(x.dropna().astype(str).unique()),
        "size EU": lambda x: sorted(x.dropna().astype(str).unique()),
    })
    .reset_index()
)

# ==============================
# üí≥ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
# ==============================
st.markdown("---")
st.subheader("–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤")

cols = st.columns(4)

for i, (_, row) in enumerate(grouped.iterrows()):
    with cols[i % 4]:
        image_path = get_first_image(row["image"])
        brand = row["brand"]
        model = row["model"]
        color = row["color"]
        price = int(row["price"]) if pd.notna(row["price"]) else "‚Äî"
        stock = str(row.get("in stock", "")).strip().lower()
        available = "‚úÖ –í –Ω–∞–ª–∏—á–∏–∏" if stock == "yes" else "‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"

        # –ö–∞—Ä—Ç–æ—á–∫–∞
        with st.container(border=True):
            st.image(image_path, use_container_width=True)
            st.markdown(f"**{brand} {model}**<br><small>{color}</small>", unsafe_allow_html=True)
            st.markdown(f"üí∏ <b>{price} ‚Ç∏</b>", unsafe_allow_html=True)
            st.caption(available)

            # Popup –æ–∫–Ω–æ
            if st.button("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", key=f"btn_{i}"):
                with st.expander(f"{brand} {model} ‚Äî {color}", expanded=True):
                    st.image(image_path, use_container_width=True)
                    st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {row.get('description', '‚Äî')}")
                    st.markdown(f"**–†–∞–∑–º–µ—Ä—ã US:** {', '.join(row['size US']) if row['size US'] else '‚Äî'}")
                    st.markdown(f"**–†–∞–∑–º–µ—Ä—ã EU:** {', '.join(row['size EU']) if row['size EU'] else '‚Äî'}")
                    st.markdown(f"**–ü—Ä–µ–¥–∑–∞–∫–∞–∑:** {row.get('preorder', '‚Äî')}")
                    st.markdown(f"**–ù–∞–ª–∏—á–∏–µ:** {available}")

st.markdown("---")
st.caption("¬© DENE Store ‚Äî 2025")
